{"version":3,"sources":["img/spinner.svg","components/InputForm.tsx","App.tsx","index.tsx"],"names":["InputForm","props","className","label","type","onChange","e","target","value","required","App","useState","email","setEmail","password","setPassword","rememberLogin","setRememberLogin","loadingAuth","setLoadingAuth","show","msg","msgError","setMsgError","showErrorAuth","simuleAjax","obj","res","ok","error","Promise","resolve","setTimeout","handleSubmit","event","a","preventDefault","then","resposta","window","location","replace","catch","console","log","split","map","item","i","onSubmit","autoComplete","checked","src","Spinner","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPAAe,G,YAAA,IAA0B,qCCS1B,SAASA,EAAUC,GAG9B,OACI,sBAAKC,UAAWD,EAAMC,UAAtB,UACI,gCAAQD,EAAME,QACd,uBACIC,KAAMH,EAAMG,KACZC,SAAU,SAACC,GAAD,OAAOL,EAAMI,SAASC,EAAEC,OAAOC,QACzCC,SAAUR,EAAMQ,cCXhC,IA+IeC,EA/IO,WAAO,IAAD,EACEC,mBAAS,IADX,mBACjBC,EADiB,KACVC,EADU,OAEQF,mBAAS,IAFjB,mBAEjBG,EAFiB,KAEPC,EAFO,OAGkBJ,oBAAS,GAH3B,mBAGjBK,EAHiB,KAGFC,EAHE,OAIcN,oBAAS,GAJvB,mBAIjBO,EAJiB,KAIJC,EAJI,OAKQR,mBAAS,CAAES,MAAM,EAAOC,IAAK,KALrC,mBAKjBC,EALiB,KAKPC,EALO,KAOlBC,EAAgB,SAAClB,GAMnBiB,EAAY,CAAEH,MAAM,EAAMC,IAHhB,UAANf,EACM,4EACA,0EAURmB,EAAa,SAACC,GAEhB,IAAIC,EAAM,CAAEC,GAAI,EAAGC,MAAO,GAS1B,MARiB,mBAAbH,EAAId,MACJe,EAAM,CAAEC,GAAI,EAAGC,MAAO,GAEF,SAAhBH,EAAIZ,WACJa,EAAM,CAAEC,GAAI,EAAGC,MAAO,IAIvB,IAAIC,SAAQ,SAACC,GAEhBC,YAAW,WACPD,EAAQJ,KACT,SAILM,EAAY,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sDACjBD,EAAME,iBAKNjB,GAAe,GACfI,EAAY,CAAEH,MAAM,EAAOC,IAAK,KAGhCI,EAAW,CAAEb,QAAOE,aACfuB,MAAK,SAACC,GACHnB,GAAe,GACXmB,EAASV,GAGTW,OAAOC,SAASC,QAAQ,MAGD,IAAnBH,EAAST,OAETL,EAAc,SAEK,IAAnBc,EAAST,OAETL,EAAc,gBAIzBkB,OAAM,SAACb,GACJV,GAAe,GACfwB,QAAQC,IAAIf,MA/BH,2CAAH,sDAqClB,OACI,qBAAK3B,UAAS,MAAd,SACI,sBAAKA,UAAU,iBAAf,UACI,qBAAKA,UAAU,QAAf,qBAECoB,EAASF,MACN,qBAAKlB,UAAU,sBAAf,SACKoB,EAASD,IAAIwB,MAAM,MAAMC,KAAI,SAACC,EAAMC,GAAP,OAE1B,aADA,CACA,gBAAcD,GAAJC,QAKtB,uBAAMC,SAAUhB,EAAciB,aAAa,mBAA3C,UACI,cAAClD,EAAD,CACIE,UAAU,kBACVC,MAAO,QACPC,KAAM,QACNC,SAAUQ,EACVJ,UAAQ,IAGZ,cAACT,EAAD,CACIE,UAAU,kBACVC,MAAO,WACPC,KAAM,WACNC,SAAUU,EACVN,UAAQ,IAGZ,wBAAOP,UAAU,qBAAjB,UACI,uBACIE,KAAK,WACLC,SAAU,kBAAMY,GAAkBD,IAClCmC,QAASnC,IAEb,sBAAMd,UAAU,cAChB,kDAGJ,wBAAQE,KAAK,SAASF,UAAU,gBAAhC,SACKgB,EACG,qBAAKkC,IAAKC,IAEV,gDAKZ,sBAAKnD,UAAU,mBAAf,UACI,8BACI,mBAAGoD,KAAK,IAAR,qCAGJ,0DAC2B,mBAAGA,KAAK,IAAR,wBAE3B,mBAAGA,KAAK,IAAR,gDC3IpBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e0dfe378.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/spinner.9ff717a9.svg\";","interface iPropsInput {\r\n    className: string;\r\n    label: string;\r\n    type: string;\r\n    onChange: (value: string) => void;\r\n    required: boolean | undefined;\r\n}\r\n\r\n\r\nexport default function InputForm(props: iPropsInput): JSX.Element {\r\n    //Why?\r\n    //because the fields for 'email' and 'password' are similar, so we can reuse this\r\n    return (\r\n        <div className={props.className}>\r\n            <label>{props.label}</label>\r\n            <input\r\n                type={props.type}\r\n                onChange={(e) => props.onChange(e.target.value)}\r\n                required={props.required}\r\n            />\r\n        </div>\r\n    );\r\n}","import { useState } from \"react\";\nimport \"./theme.scss\"; // in case of, for example, use dark or light themes //is not in use\nimport \"./App.scss\";\nimport Spinner from \"./img/spinner.svg\"; //spinner for auth button\nimport { AjaxPost } from \"./utils/ajax\"; // function for API request (using the fetch - native)\nimport InputForm from \"./components/InputForm\";\n\nconst App: React.FC = () => {\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [rememberLogin, setRememberLogin] = useState(false);\n    const [loadingAuth, setLoadingAuth] = useState(false); //show/hide spinner during the load ajax\n    const [msgError, setMsgError] = useState({ show: false, msg: \"\" }); //for the pink box that show the error\n\n    const showErrorAuth = (e: string) => {\n        //show the pink box and the error in case of Auth fail\n        const msg =\n            e === \"email\"\n                ? \"Sorry, we couldn't find this email address.\\n Please check and try again.\"\n                : \"Password incorrect.\\n Note that passwords are case-sensitive (AaBb).\";\n        setMsgError({ show: true, msg });\n    };\n\n    const ajaxAuth = async () => {\n        //in case of having an api to call\n        const info = { email, password, rememberLogin };\n        return await AjaxPost(\"login\", info);\n    };\n\n    const simuleAjax = (obj: { email: string; password: string }) => {\n        //this is a fake function ajax. We dont need correctly write interfaces typescript here\n        let res = { ok: 1, error: 0 };\n        if (obj.email != \"email@email.com\") {\n            res = { ok: 0, error: 1 };\n        } else {\n            if (obj.password != \"12345\") {\n                res = { ok: 0, error: 2 };\n            }\n        }\n\n        return new Promise((resolve) => {\n            // return the 'response' after 1s\n            setTimeout(() => {\n                resolve(res);\n            }, 1000);\n        });\n    };\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n\n        //we are not using ajax, but we can simulate a request to see how works\n        // in case of available server, use ajaxAuth function. See the `info` obj in there.\n\n        setLoadingAuth(true);\n        setMsgError({ show: false, msg: \"\" }); // in case of retry login, hide the box error\n\n        //ajaxAuth() -> uncomment this , and delete the next line, to use  a real API\n        simuleAjax({ email, password })\n            .then((resposta: any) => {\n                setLoadingAuth(false);\n                if (resposta.ok) {\n                    //ok -> redirect to Home Page\n                    //... save session or set localstorage\n                    window.location.replace(\"/\");\n                } else {\n                    //error\n                    if (resposta.error === 1) {\n                        // code error=1 -> email not found\n                        showErrorAuth(\"email\");\n                    }\n                    if (resposta.error === 2) {\n                        // code error=2 -> incorrect password\n                        showErrorAuth(\"password\");\n                    }\n                }\n            })\n            .catch((error) => {\n                setLoadingAuth(false);\n                console.log(error);\n            });\n\n        // console.log(\"credentials: \", email, password);\n    };\n\n    return (\n        <div className={`App`}>\n            <div className=\"auth-form-body\">\n                <div className=\"title\">Sign in</div>\n\n                {msgError.show && (\n                    <div className=\"auth-form-box-error\">\n                        {msgError.msg.split(\"\\n\").map((item, i) => (\n                            //break the msg text. In react we cannot securely inject tags like '<br>' via function\n                            <div key={i}>{item}</div>\n                        ))}\n                    </div>\n                )}\n\n                <form onSubmit={handleSubmit} autoComplete=\"current-password\">\n                    <InputForm\n                        className=\"auth-form-input\"\n                        label={\"Email\"}\n                        type={\"email\"} //input type. The browser handles validation natively\n                        onChange={setEmail} //pass the `setState` of a state as a prop\n                        required //input cannot be empty\n                    />\n\n                    <InputForm\n                        className=\"auth-form-input\"\n                        label={\"Password\"}\n                        type={\"password\"}\n                        onChange={setPassword}\n                        required\n                    />\n\n                    <label className=\"auth-form-remember\">\n                        <input\n                            type=\"checkbox\"\n                            onChange={() => setRememberLogin(!rememberLogin)}\n                            checked={rememberLogin}\n                        />\n                        <span className=\"checkmark\"></span>\n                        <div>Remember me?</div>\n                    </label>\n\n                    <button type=\"submit\" className=\"button-submit\">\n                        {loadingAuth ? (\n                            <img src={Spinner} />\n                        ) : (\n                            <span>Sign in</span>\n                        )}\n                    </button>\n                </form>\n\n                <div className=\"auth-form-footer\">\n                    <div>\n                        <a href=\"#\">Forgot your password?</a>\n                        {/* here im putting a url, but it can also be a function to open a modal. Depends on business rules */}\n                    </div>\n                    <div>\n                        Don't have an account? <a href=\"#\">Sign up</a>\n                    </div>\n                    <a href=\"#\">Resend email confirmation</a>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n import App from './App';\r\n \r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}